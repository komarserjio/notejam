import '/os/path'

import '/dogeweb'
import '/dogeweb/r'
import '/dogeweb/property'

import 'data'

STATIC_DIR = path.join (path.dirname __file__) 'static'
MARKUP_DIR = path.join (path.dirname __file__) 'templates'


#with templates.jinja_dir MARKUP_DIR =>
#  import 'notes/list'  qualified
#  import 'notes/view'  qualified
#  import 'user/view'   qualified
#  import 'user/login'  qualified
#  import 'user/remind' qualified


note_list = ~>
  pad, notes = data.get_notes @user None
  if @isjson   => @jsonify $ dict notes: notes pads: pads
     otherwise => @render notes.list pad: None notes: notes


note_create = ~>
  name = @form.get 'name' ''
  text = @form.get 'text' ''
  pad  = @form.get 'pad'  ''
  note = data.add_note @user name text pad
  @redirect $ @url_for '.note' note_id: note.id


note_view = note_id ~>
  except err => note = data.get_note @user note_id
         err :: KeyError => @abort 404
  if @isjson   => @jsonify note
     otherwise => @render notes.view note: note


note_edit = note_id ~>
  name = @form.get 'name' ''
  text = @form.get 'text' ''
  pad  = @form.get 'pad'  ''
  except err => data.set_note @user note_id name text pad
         err :: KeyError => @abort 404
  @redirect $ @url_for '.note' note_id: note_id


note_delete = note_id ~>
  except err => note = data.pop_note @user note_id
         err :: KeyError => @abort 404
  @redirect $ if
    note.pad  => @url_for '.pad' pad_id: note.pad.id
    otherwise => @url_for '.root'


pad_view = pad_id ~>
  except err => pad, notes = data.get_notes @user pad_id
         err :: KeyError => @abort 404
  if @isjson   => @jsonify pad: pad notes: notes
     otherwise => @render notes.list pad: pad notes: notes


pad_edit = pad_id ~>
  name = @form.get 'name' ''
  except err => data.set_pad @user pad_id name
         err :: KeyError => @abort 404
  @redirect '.pad' pad_id: pad_id


user_config = ~> if
  @user =>
    if @isjson   => @jsonify @user
       # TODO display a configuration form.
       # The only setting is the password.
       otherwise => @render user.view user: @user
  otherwise =>
    if @isjson   => @abort 403
       # TODO display a login form.
       # Email & password.
       otherwise => @render user.login


user_config_set = ~>
  pwd   = @form.get 'pwd'  ''
  email = @form.get 'user' @user.email
  email => @set_user $ except
    # Yes, this will re-check the password even if already logged in.
    # That's a security feature.
    err => data.check_user email pwd
    err :: KeyError   => @abort 403
    err :: ValueError => @abort 403

  not @user => @abort 403
  new_pwd = @form.get 'new_pwd' ''
  new_pwd and @user => @set_user $ data.update_user @user new_pwd
  @redirect $ @url_for '.user'


user_create = ~>
  pwd   = @form.get 'pwd'  ''
  email = @form.get 'user' ''
  email and pwd =>
    @set_user $ except
      err => data.create_user email pwd
      err :: KeyError => @abort 403
    @redirect $ @url_for '.root'
  @abort 400


user_logout = ~>
  @set_user None
  @redirect $ @url_for '.root'


user_remind = ~>
  email = @form.get 'user' ''
  email or @abort 400

  except
    err => data.check_user email None
    err :: KeyError =>
      # NOTE: raising an exception here would allow attackers to brute-force
      #   e-mails. We'll fail silently instead.
    err is None =>
      # TODO send a message.

  if @isjson   => @jsonify None
     otherwise => @render user.remind email: email


with_templating = f -> r.wraps f $ **: k ~>
  @render = template **: args -> template **: args
    # Additional data to pass to the templates goes here.
    request: self
    # ...
  f self **: k


with_user_support = f -> r.wraps f $ **: k ~>
  @set_user = data ->
    # TODO store the username
    @user = data

  # TODO get the username
  current_user = ''

  @user = except
    err => data.check_user current_user None
    err :: KeyError => None
  f self **: k


login_required = f -> r.wraps f $ **: k ~>
  if @user     => f self **: k
     # TODO make it return to `@fullpath` somehow.
     otherwise => @redirect $ @url_for '.user'


app = dogeweb.app
  root = with_templating $ with_user_support $ r.path
    '/', 'root', login_required $ r.method
      'GET',  note_list
      'POST', note_create

    '/notes/<int:note_id>/', 'note', login_required $ r.method
      'GET',    note_view
      'POST',   note_edit
      'DELETE', note_delete

    '/pads/<int:pad_id>/', 'pad', login_required $ r.method
      # NOTE: pads are created and removed automatically.
      #   A pad exists iff any note is assigned to it.
      'GET',  pad_view
      'POST', pad_edit

    '/me/', 'user', r.method
      'GET',    user_config
      'POST',   user_config_set
      'PUT',    user_create
      # NOTE: HTTP allows any methods that match a certain syntax.
      #   Why limit yourself to GET and POST when neither libraries nor browsers
      #   have any problems with other methods?
      'LOGOUT', user_logout
      'FORGOT', user_remind

    '/robots.txt',        ~> @redirect '/static/robots.txt'
    '/favicon.ico',       ~> @redirect '/static/favicon.ico'
    '/static/<path:x>', x ~> @static $ path.join STATIC_DIR $ path.normpath $ x.lstrip '/'
  # error_handler = exception ~> response
